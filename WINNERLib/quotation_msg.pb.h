// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WINNERLib/quotation_msg.proto

#ifndef PROTOBUF_WINNERLib_2fquotation_5fmsg_2eproto__INCLUDED
#define PROTOBUF_WINNERLib_2fquotation_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "TLib/core/tsystem_time.pb.h"
#include "TLib/core/tsystem_return_code.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
void protobuf_AssignDesc_WINNERLib_2fquotation_5fmsg_2eproto();
void protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto();

class QuotationRequest;
class QuotationMessage;

enum QuotationReqType {
  FENBI = 0,
  ONE_MINUTE = 1,
  THREE_MINUTE = 2,
  FIVE_MINUTE = 3,
  TEN_MINUTE = 4,
  THIRTEEN_MINUTE = 5,
  HOUR = 6,
  DAY = 7
};
bool QuotationReqType_IsValid(int value);
const QuotationReqType QuotationReqType_MIN = FENBI;
const QuotationReqType QuotationReqType_MAX = DAY;
const int QuotationReqType_ARRAYSIZE = QuotationReqType_MAX + 1;

// ===================================================================

class QuotationRequest : public ::google::protobuf::MessageLite {
 public:
  QuotationRequest();
  virtual ~QuotationRequest();

  QuotationRequest(const QuotationRequest& from);

  inline QuotationRequest& operator=(const QuotationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const QuotationRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const QuotationRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(QuotationRequest* other);

  // implements Message ----------------------------------------------

  QuotationRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const QuotationRequest& from);
  void MergeFrom(const QuotationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .QuotationReqType req_type = 1;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  inline ::QuotationReqType req_type() const;
  inline void set_req_type(::QuotationReqType value);

  // required string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // required .Time beg_time = 3;
  inline bool has_beg_time() const;
  inline void clear_beg_time();
  static const int kBegTimeFieldNumber = 3;
  inline const ::Time& beg_time() const;
  inline ::Time* mutable_beg_time();
  inline ::Time* release_beg_time();
  inline void set_allocated_beg_time(::Time* beg_time);

  // required .Time end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline const ::Time& end_time() const;
  inline ::Time* mutable_end_time();
  inline ::Time* release_end_time();
  inline void set_allocated_end_time(::Time* end_time);

  // @@protoc_insertion_point(class_scope:QuotationRequest)
 private:
  inline void set_has_req_type();
  inline void clear_has_req_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_beg_time();
  inline void clear_has_beg_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::std::string* code_;
  ::Time* beg_time_;
  ::Time* end_time_;
  int req_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static QuotationRequest* default_instance_;
};
// -------------------------------------------------------------------

class QuotationMessage : public ::google::protobuf::MessageLite {
 public:
  QuotationMessage();
  virtual ~QuotationMessage();

  QuotationMessage(const QuotationMessage& from);

  inline QuotationMessage& operator=(const QuotationMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const QuotationMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const QuotationMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(QuotationMessage* other);

  // implements Message ----------------------------------------------

  QuotationMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const QuotationMessage& from);
  void MergeFrom(const QuotationMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:QuotationMessage)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::std::string* code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static QuotationMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// QuotationRequest

// required .QuotationReqType req_type = 1;
inline bool QuotationRequest::has_req_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuotationRequest::set_has_req_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuotationRequest::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuotationRequest::clear_req_type() {
  req_type_ = 0;
  clear_has_req_type();
}
inline ::QuotationReqType QuotationRequest::req_type() const {
  return static_cast< ::QuotationReqType >(req_type_);
}
inline void QuotationRequest::set_req_type(::QuotationReqType value) {
  assert(::QuotationReqType_IsValid(value));
  set_has_req_type();
  req_type_ = value;
}

// required string code = 2;
inline bool QuotationRequest::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuotationRequest::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuotationRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuotationRequest::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& QuotationRequest::code() const {
  return *code_;
}
inline void QuotationRequest::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void QuotationRequest::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void QuotationRequest::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuotationRequest::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* QuotationRequest::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuotationRequest::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Time beg_time = 3;
inline bool QuotationRequest::has_beg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuotationRequest::set_has_beg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuotationRequest::clear_has_beg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuotationRequest::clear_beg_time() {
  if (beg_time_ != NULL) beg_time_->::Time::Clear();
  clear_has_beg_time();
}
inline const ::Time& QuotationRequest::beg_time() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return beg_time_ != NULL ? *beg_time_ : *default_instance().beg_time_;
#else
  return beg_time_ != NULL ? *beg_time_ : *default_instance_->beg_time_;
#endif
}
inline ::Time* QuotationRequest::mutable_beg_time() {
  set_has_beg_time();
  if (beg_time_ == NULL) beg_time_ = new ::Time;
  return beg_time_;
}
inline ::Time* QuotationRequest::release_beg_time() {
  clear_has_beg_time();
  ::Time* temp = beg_time_;
  beg_time_ = NULL;
  return temp;
}
inline void QuotationRequest::set_allocated_beg_time(::Time* beg_time) {
  delete beg_time_;
  beg_time_ = beg_time;
  if (beg_time) {
    set_has_beg_time();
  } else {
    clear_has_beg_time();
  }
}

// required .Time end_time = 4;
inline bool QuotationRequest::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuotationRequest::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuotationRequest::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuotationRequest::clear_end_time() {
  if (end_time_ != NULL) end_time_->::Time::Clear();
  clear_has_end_time();
}
inline const ::Time& QuotationRequest::end_time() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return end_time_ != NULL ? *end_time_ : *default_instance().end_time_;
#else
  return end_time_ != NULL ? *end_time_ : *default_instance_->end_time_;
#endif
}
inline ::Time* QuotationRequest::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == NULL) end_time_ = new ::Time;
  return end_time_;
}
inline ::Time* QuotationRequest::release_end_time() {
  clear_has_end_time();
  ::Time* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline void QuotationRequest::set_allocated_end_time(::Time* end_time) {
  delete end_time_;
  end_time_ = end_time;
  if (end_time) {
    set_has_end_time();
  } else {
    clear_has_end_time();
  }
}

// -------------------------------------------------------------------

// QuotationMessage

// required string code = 1;
inline bool QuotationMessage::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuotationMessage::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuotationMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuotationMessage::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& QuotationMessage::code() const {
  return *code_;
}
inline void QuotationMessage::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void QuotationMessage::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void QuotationMessage::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuotationMessage::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* QuotationMessage::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuotationMessage::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WINNERLib_2fquotation_5fmsg_2eproto__INCLUDED
