// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WINNERLib/winner_user_msg.proto

#ifndef PROTOBUF_WINNERLib_2fwinner_5fuser_5fmsg_2eproto__INCLUDED
#define PROTOBUF_WINNERLib_2fwinner_5fuser_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "TLib/core/tsystem_time.pb.h"
#include "TLib/core/tsystem_return_code.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
void protobuf_AssignDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
void protobuf_ShutdownFile_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();

class UserRequest;
class UserRequestAck;

enum RequestType {
  LOGIN = 0,
  LOGOUT = 1
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = LOGIN;
const RequestType RequestType_MAX = LOGOUT;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

// ===================================================================

class UserRequest : public ::google::protobuf::MessageLite {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserRequest* other);

  // implements Message ----------------------------------------------

  UserRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required .RequestType request_type = 2;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  inline ::RequestType request_type() const;
  inline void set_request_type(::RequestType value);

  // required uint32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:UserRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::uint32 request_id_;
  int request_type_;
  ::std::string* password_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static UserRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserRequestAck : public ::google::protobuf::MessageLite {
 public:
  UserRequestAck();
  virtual ~UserRequestAck();

  UserRequestAck(const UserRequestAck& from);

  inline UserRequestAck& operator=(const UserRequestAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserRequestAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserRequestAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserRequestAck* other);

  // implements Message ----------------------------------------------

  UserRequestAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserRequestAck& from);
  void MergeFrom(const UserRequestAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional .RequestAck req_ack = 2;
  inline bool has_req_ack() const;
  inline void clear_req_ack();
  static const int kReqAckFieldNumber = 2;
  inline const ::RequestAck& req_ack() const;
  inline ::RequestAck* mutable_req_ack();
  inline ::RequestAck* release_req_ack();
  inline void set_allocated_req_ack(::RequestAck* req_ack);

  // optional .RequestType req_type = 3;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 3;
  inline ::RequestType req_type() const;
  inline void set_req_type(::RequestType value);

  // @@protoc_insertion_point(class_scope:UserRequestAck)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_req_ack();
  inline void clear_has_req_ack();
  inline void set_has_req_type();
  inline void clear_has_req_type();

  ::RequestAck* req_ack_;
  ::google::protobuf::uint32 user_id_;
  int req_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static UserRequestAck* default_instance_;
};
// ===================================================================


// ===================================================================

// UserRequest

// required uint32 request_id = 1;
inline bool UserRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 UserRequest::request_id() const {
  return request_id_;
}
inline void UserRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// required .RequestType request_type = 2;
inline bool UserRequest::has_request_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequest::set_has_request_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequest::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequest::clear_request_type() {
  request_type_ = 0;
  clear_has_request_type();
}
inline ::RequestType UserRequest::request_type() const {
  return static_cast< ::RequestType >(request_type_);
}
inline void UserRequest::set_request_type(::RequestType value) {
  assert(::RequestType_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// required uint32 user_id = 3;
inline bool UserRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserRequest::user_id() const {
  return user_id_;
}
inline void UserRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string password = 4;
inline bool UserRequest::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRequest::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserRequest::password() const {
  return *password_;
}
inline void UserRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* UserRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserRequestAck

// optional uint32 user_id = 1;
inline bool UserRequestAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequestAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequestAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequestAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserRequestAck::user_id() const {
  return user_id_;
}
inline void UserRequestAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .RequestAck req_ack = 2;
inline bool UserRequestAck::has_req_ack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequestAck::set_has_req_ack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequestAck::clear_has_req_ack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequestAck::clear_req_ack() {
  if (req_ack_ != NULL) req_ack_->::RequestAck::Clear();
  clear_has_req_ack();
}
inline const ::RequestAck& UserRequestAck::req_ack() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return req_ack_ != NULL ? *req_ack_ : *default_instance().req_ack_;
#else
  return req_ack_ != NULL ? *req_ack_ : *default_instance_->req_ack_;
#endif
}
inline ::RequestAck* UserRequestAck::mutable_req_ack() {
  set_has_req_ack();
  if (req_ack_ == NULL) req_ack_ = new ::RequestAck;
  return req_ack_;
}
inline ::RequestAck* UserRequestAck::release_req_ack() {
  clear_has_req_ack();
  ::RequestAck* temp = req_ack_;
  req_ack_ = NULL;
  return temp;
}
inline void UserRequestAck::set_allocated_req_ack(::RequestAck* req_ack) {
  delete req_ack_;
  req_ack_ = req_ack;
  if (req_ack) {
    set_has_req_ack();
  } else {
    clear_has_req_ack();
  }
}

// optional .RequestType req_type = 3;
inline bool UserRequestAck::has_req_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRequestAck::set_has_req_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRequestAck::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRequestAck::clear_req_type() {
  req_type_ = 0;
  clear_has_req_type();
}
inline ::RequestType UserRequestAck::req_type() const {
  return static_cast< ::RequestType >(req_type_);
}
inline void UserRequestAck::set_req_type(::RequestType value) {
  assert(::RequestType_IsValid(value));
  set_has_req_type();
  req_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WINNERLib_2fwinner_5fuser_5fmsg_2eproto__INCLUDED
