// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WINNERLib/quotation_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WINNERLib/quotation_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto() {
  delete QuotationRequest::default_instance_;
  delete QuotationMessage::default_instance_;
  delete QuotationMessage_QuotationFillMessage::default_instance_;
  delete QuotationMessage_QuotationKbarMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5ftime_2eproto();
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5freturn_5fcode_2eproto();
  ::protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto();
  QuotationRequest::default_instance_ = new QuotationRequest();
  QuotationMessage::default_instance_ = new QuotationMessage();
  QuotationMessage_QuotationFillMessage::default_instance_ = new QuotationMessage_QuotationFillMessage();
  QuotationMessage_QuotationKbarMessage::default_instance_ = new QuotationMessage_QuotationKbarMessage();
  QuotationRequest::default_instance_->InitAsDefaultInstance();
  QuotationMessage::default_instance_->InitAsDefaultInstance();
  QuotationMessage_QuotationFillMessage::default_instance_->InitAsDefaultInstance();
  QuotationMessage_QuotationKbarMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_once_);
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_once_,
                 &protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WINNERLib_2fquotation_5fmsg_2eproto {
  StaticDescriptorInitializer_WINNERLib_2fquotation_5fmsg_2eproto() {
    protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  }
} static_descriptor_initializer_WINNERLib_2fquotation_5fmsg_2eproto_;
#endif
bool QuotationReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool QuotationFqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QuotationRequest::kReqIdFieldNumber;
const int QuotationRequest::kReqTypeFieldNumber;
const int QuotationRequest::kCodeFieldNumber;
const int QuotationRequest::kBegTimeFieldNumber;
const int QuotationRequest::kEndTimeFieldNumber;
const int QuotationRequest::kIsIndexFieldNumber;
const int QuotationRequest::kFqTypeFieldNumber;
#endif  // !_MSC_VER

QuotationRequest::QuotationRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  beg_time_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
#else
  beg_time_ = const_cast< ::Time*>(&::Time::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  end_time_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
#else
  end_time_ = const_cast< ::Time*>(&::Time::default_instance());
#endif
}

QuotationRequest::QuotationRequest(const QuotationRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationRequest::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  req_type_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beg_time_ = NULL;
  end_time_ = NULL;
  is_index_ = true;
  fq_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationRequest::~QuotationRequest() {
  SharedDtor();
}

void QuotationRequest::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete beg_time_;
    delete end_time_;
  }
}

void QuotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationRequest& QuotationRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationRequest* QuotationRequest::default_instance_ = NULL;

QuotationRequest* QuotationRequest::New() const {
  return new QuotationRequest;
}

void QuotationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    req_type_ = 0;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_beg_time()) {
      if (beg_time_ != NULL) beg_time_->::Time::Clear();
    }
    if (has_end_time()) {
      if (end_time_ != NULL) end_time_->::Time::Clear();
    }
    is_index_ = true;
    fq_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 req_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_req_type;
        break;
      }

      // required .QuotationReqType req_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QuotationReqType_IsValid(value)) {
            set_req_type(static_cast< ::QuotationReqType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // required string code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beg_time;
        break;
      }

      // required .Time beg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beg_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beg_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }

      // required .Time end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_index;
        break;
      }

      // optional bool is_index = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_index_)));
          set_has_is_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fq_type;
        break;
      }

      // optional .QuotationFqType fq_type = 7 [default = FQ_BEFORE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fq_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QuotationFqType_IsValid(value)) {
            set_fq_type(static_cast< ::QuotationFqType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 req_id = 1 [default = 0];
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required .QuotationReqType req_type = 2;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->req_type(), output);
  }

  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code(), output);
  }

  // required .Time beg_time = 4;
  if (has_beg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->beg_time(), output);
  }

  // required .Time end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->end_time(), output);
  }

  // optional bool is_index = 6 [default = true];
  if (has_is_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_index(), output);
  }

  // optional .QuotationFqType fq_type = 7 [default = FQ_BEFORE];
  if (has_fq_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fq_type(), output);
  }

}

int QuotationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 req_id = 1 [default = 0];
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required .QuotationReqType req_type = 2;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
    }

    // required string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required .Time beg_time = 4;
    if (has_beg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beg_time());
    }

    // required .Time end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_time());
    }

    // optional bool is_index = 6 [default = true];
    if (has_is_index()) {
      total_size += 1 + 1;
    }

    // optional .QuotationFqType fq_type = 7 [default = FQ_BEFORE];
    if (has_fq_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fq_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationRequest*>(&from));
}

void QuotationRequest::MergeFrom(const QuotationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_beg_time()) {
      mutable_beg_time()->::Time::MergeFrom(from.beg_time());
    }
    if (from.has_end_time()) {
      mutable_end_time()->::Time::MergeFrom(from.end_time());
    }
    if (from.has_is_index()) {
      set_is_index(from.is_index());
    }
    if (from.has_fq_type()) {
      set_fq_type(from.fq_type());
    }
  }
}

void QuotationRequest::CopyFrom(const QuotationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void QuotationRequest::Swap(QuotationRequest* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(req_type_, other->req_type_);
    std::swap(code_, other->code_);
    std::swap(beg_time_, other->beg_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(is_index_, other->is_index_);
    std::swap(fq_type_, other->fq_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationRequest::GetTypeName() const {
  return "QuotationRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int QuotationMessage_QuotationFillMessage::kTimeFieldNumber;
const int QuotationMessage_QuotationFillMessage::kPriceFieldNumber;
const int QuotationMessage_QuotationFillMessage::kVolFieldNumber;
const int QuotationMessage_QuotationFillMessage::kPriceChangeFieldNumber;
const int QuotationMessage_QuotationFillMessage::kIsChangePositiveFieldNumber;
const int QuotationMessage_QuotationFillMessage::kB1FieldNumber;
const int QuotationMessage_QuotationFillMessage::kB2FieldNumber;
const int QuotationMessage_QuotationFillMessage::kB3FieldNumber;
const int QuotationMessage_QuotationFillMessage::kB4FieldNumber;
const int QuotationMessage_QuotationFillMessage::kB5FieldNumber;
const int QuotationMessage_QuotationFillMessage::kS1FieldNumber;
const int QuotationMessage_QuotationFillMessage::kS2FieldNumber;
const int QuotationMessage_QuotationFillMessage::kS3FieldNumber;
const int QuotationMessage_QuotationFillMessage::kS4FieldNumber;
const int QuotationMessage_QuotationFillMessage::kS5FieldNumber;
#endif  // !_MSC_VER

QuotationMessage_QuotationFillMessage::QuotationMessage_QuotationFillMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationMessage_QuotationFillMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
#else
  time_ = const_cast< ::Time*>(&::Time::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  price_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  price_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  price_change_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  price_change_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  b_1_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  b_1_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  b_2_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  b_2_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  b_3_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  b_3_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  b_4_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  b_4_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  b_5_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  b_5_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  s_1_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  s_1_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  s_2_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  s_2_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  s_3_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  s_3_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  s_4_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  s_4_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  s_5_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  s_5_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
}

QuotationMessage_QuotationFillMessage::QuotationMessage_QuotationFillMessage(const QuotationMessage_QuotationFillMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationMessage_QuotationFillMessage::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  price_ = NULL;
  vol_ = 0u;
  price_change_ = NULL;
  is_change_positive_ = true;
  b_1_ = NULL;
  b_2_ = NULL;
  b_3_ = NULL;
  b_4_ = NULL;
  b_5_ = NULL;
  s_1_ = NULL;
  s_2_ = NULL;
  s_3_ = NULL;
  s_4_ = NULL;
  s_5_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationMessage_QuotationFillMessage::~QuotationMessage_QuotationFillMessage() {
  SharedDtor();
}

void QuotationMessage_QuotationFillMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete time_;
    delete price_;
    delete price_change_;
    delete b_1_;
    delete b_2_;
    delete b_3_;
    delete b_4_;
    delete b_5_;
    delete s_1_;
    delete s_2_;
    delete s_3_;
    delete s_4_;
    delete s_5_;
  }
}

void QuotationMessage_QuotationFillMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationMessage_QuotationFillMessage& QuotationMessage_QuotationFillMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationMessage_QuotationFillMessage* QuotationMessage_QuotationFillMessage::default_instance_ = NULL;

QuotationMessage_QuotationFillMessage* QuotationMessage_QuotationFillMessage::New() const {
  return new QuotationMessage_QuotationFillMessage;
}

void QuotationMessage_QuotationFillMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != NULL) time_->::Time::Clear();
    }
    if (has_price()) {
      if (price_ != NULL) price_->::RationalNumber::Clear();
    }
    vol_ = 0u;
    if (has_price_change()) {
      if (price_change_ != NULL) price_change_->::RationalNumber::Clear();
    }
    is_change_positive_ = true;
    if (has_b_1()) {
      if (b_1_ != NULL) b_1_->::RationalNumber::Clear();
    }
    if (has_b_2()) {
      if (b_2_ != NULL) b_2_->::RationalNumber::Clear();
    }
    if (has_b_3()) {
      if (b_3_ != NULL) b_3_->::RationalNumber::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_b_4()) {
      if (b_4_ != NULL) b_4_->::RationalNumber::Clear();
    }
    if (has_b_5()) {
      if (b_5_ != NULL) b_5_->::RationalNumber::Clear();
    }
    if (has_s_1()) {
      if (s_1_ != NULL) s_1_->::RationalNumber::Clear();
    }
    if (has_s_2()) {
      if (s_2_ != NULL) s_2_->::RationalNumber::Clear();
    }
    if (has_s_3()) {
      if (s_3_ != NULL) s_3_->::RationalNumber::Clear();
    }
    if (has_s_4()) {
      if (s_4_ != NULL) s_4_->::RationalNumber::Clear();
    }
    if (has_s_5()) {
      if (s_5_ != NULL) s_5_->::RationalNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationMessage_QuotationFillMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Time time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_price;
        break;
      }

      // required .RationalNumber price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vol;
        break;
      }

      // required uint32 vol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vol_)));
          set_has_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_price_change;
        break;
      }

      // optional .RationalNumber price_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_change_positive;
        break;
      }

      // optional bool is_change_positive = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_change_positive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_change_positive_)));
          set_has_is_change_positive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_b_1;
        break;
      }

      // optional .RationalNumber b_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_b_2;
        break;
      }

      // optional .RationalNumber b_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_b_3;
        break;
      }

      // optional .RationalNumber b_3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_b_4;
        break;
      }

      // optional .RationalNumber b_4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_b_5;
        break;
      }

      // optional .RationalNumber b_5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b_5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_s_1;
        break;
      }

      // optional .RationalNumber s_1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_s_2;
        break;
      }

      // optional .RationalNumber s_2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_s_3;
        break;
      }

      // optional .RationalNumber s_3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_s_4;
        break;
      }

      // optional .RationalNumber s_4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_s_5;
        break;
      }

      // optional .RationalNumber s_5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationMessage_QuotationFillMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Time time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->time(), output);
  }

  // required .RationalNumber price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->price(), output);
  }

  // required uint32 vol = 3;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vol(), output);
  }

  // optional .RationalNumber price_change = 4;
  if (has_price_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->price_change(), output);
  }

  // optional bool is_change_positive = 5 [default = true];
  if (has_is_change_positive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_change_positive(), output);
  }

  // optional .RationalNumber b_1 = 6;
  if (has_b_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->b_1(), output);
  }

  // optional .RationalNumber b_2 = 7;
  if (has_b_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->b_2(), output);
  }

  // optional .RationalNumber b_3 = 8;
  if (has_b_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->b_3(), output);
  }

  // optional .RationalNumber b_4 = 9;
  if (has_b_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->b_4(), output);
  }

  // optional .RationalNumber b_5 = 10;
  if (has_b_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->b_5(), output);
  }

  // optional .RationalNumber s_1 = 11;
  if (has_s_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->s_1(), output);
  }

  // optional .RationalNumber s_2 = 12;
  if (has_s_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->s_2(), output);
  }

  // optional .RationalNumber s_3 = 13;
  if (has_s_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->s_3(), output);
  }

  // optional .RationalNumber s_4 = 14;
  if (has_s_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->s_4(), output);
  }

  // optional .RationalNumber s_5 = 15;
  if (has_s_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->s_5(), output);
  }

}

int QuotationMessage_QuotationFillMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Time time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required .RationalNumber price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }

    // required uint32 vol = 3;
    if (has_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vol());
    }

    // optional .RationalNumber price_change = 4;
    if (has_price_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price_change());
    }

    // optional bool is_change_positive = 5 [default = true];
    if (has_is_change_positive()) {
      total_size += 1 + 1;
    }

    // optional .RationalNumber b_1 = 6;
    if (has_b_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b_1());
    }

    // optional .RationalNumber b_2 = 7;
    if (has_b_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b_2());
    }

    // optional .RationalNumber b_3 = 8;
    if (has_b_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b_3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .RationalNumber b_4 = 9;
    if (has_b_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b_4());
    }

    // optional .RationalNumber b_5 = 10;
    if (has_b_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b_5());
    }

    // optional .RationalNumber s_1 = 11;
    if (has_s_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_1());
    }

    // optional .RationalNumber s_2 = 12;
    if (has_s_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_2());
    }

    // optional .RationalNumber s_3 = 13;
    if (has_s_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_3());
    }

    // optional .RationalNumber s_4 = 14;
    if (has_s_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_4());
    }

    // optional .RationalNumber s_5 = 15;
    if (has_s_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_5());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationMessage_QuotationFillMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationMessage_QuotationFillMessage*>(&from));
}

void QuotationMessage_QuotationFillMessage::MergeFrom(const QuotationMessage_QuotationFillMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::Time::MergeFrom(from.time());
    }
    if (from.has_price()) {
      mutable_price()->::RationalNumber::MergeFrom(from.price());
    }
    if (from.has_vol()) {
      set_vol(from.vol());
    }
    if (from.has_price_change()) {
      mutable_price_change()->::RationalNumber::MergeFrom(from.price_change());
    }
    if (from.has_is_change_positive()) {
      set_is_change_positive(from.is_change_positive());
    }
    if (from.has_b_1()) {
      mutable_b_1()->::RationalNumber::MergeFrom(from.b_1());
    }
    if (from.has_b_2()) {
      mutable_b_2()->::RationalNumber::MergeFrom(from.b_2());
    }
    if (from.has_b_3()) {
      mutable_b_3()->::RationalNumber::MergeFrom(from.b_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_b_4()) {
      mutable_b_4()->::RationalNumber::MergeFrom(from.b_4());
    }
    if (from.has_b_5()) {
      mutable_b_5()->::RationalNumber::MergeFrom(from.b_5());
    }
    if (from.has_s_1()) {
      mutable_s_1()->::RationalNumber::MergeFrom(from.s_1());
    }
    if (from.has_s_2()) {
      mutable_s_2()->::RationalNumber::MergeFrom(from.s_2());
    }
    if (from.has_s_3()) {
      mutable_s_3()->::RationalNumber::MergeFrom(from.s_3());
    }
    if (from.has_s_4()) {
      mutable_s_4()->::RationalNumber::MergeFrom(from.s_4());
    }
    if (from.has_s_5()) {
      mutable_s_5()->::RationalNumber::MergeFrom(from.s_5());
    }
  }
}

void QuotationMessage_QuotationFillMessage::CopyFrom(const QuotationMessage_QuotationFillMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationMessage_QuotationFillMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_price()) {
    if (!this->price().IsInitialized()) return false;
  }
  if (has_price_change()) {
    if (!this->price_change().IsInitialized()) return false;
  }
  if (has_b_1()) {
    if (!this->b_1().IsInitialized()) return false;
  }
  if (has_b_2()) {
    if (!this->b_2().IsInitialized()) return false;
  }
  if (has_b_3()) {
    if (!this->b_3().IsInitialized()) return false;
  }
  if (has_b_4()) {
    if (!this->b_4().IsInitialized()) return false;
  }
  if (has_b_5()) {
    if (!this->b_5().IsInitialized()) return false;
  }
  if (has_s_1()) {
    if (!this->s_1().IsInitialized()) return false;
  }
  if (has_s_2()) {
    if (!this->s_2().IsInitialized()) return false;
  }
  if (has_s_3()) {
    if (!this->s_3().IsInitialized()) return false;
  }
  if (has_s_4()) {
    if (!this->s_4().IsInitialized()) return false;
  }
  if (has_s_5()) {
    if (!this->s_5().IsInitialized()) return false;
  }
  return true;
}

void QuotationMessage_QuotationFillMessage::Swap(QuotationMessage_QuotationFillMessage* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(price_, other->price_);
    std::swap(vol_, other->vol_);
    std::swap(price_change_, other->price_change_);
    std::swap(is_change_positive_, other->is_change_positive_);
    std::swap(b_1_, other->b_1_);
    std::swap(b_2_, other->b_2_);
    std::swap(b_3_, other->b_3_);
    std::swap(b_4_, other->b_4_);
    std::swap(b_5_, other->b_5_);
    std::swap(s_1_, other->s_1_);
    std::swap(s_2_, other->s_2_);
    std::swap(s_3_, other->s_3_);
    std::swap(s_4_, other->s_4_);
    std::swap(s_5_, other->s_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationMessage_QuotationFillMessage::GetTypeName() const {
  return "QuotationMessage.QuotationFillMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QuotationMessage_QuotationKbarMessage::kYyyymmddFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kHhmmddFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kOpenFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kCloseFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kHighFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kLowFieldNumber;
const int QuotationMessage_QuotationKbarMessage::kVolFieldNumber;
#endif  // !_MSC_VER

QuotationMessage_QuotationKbarMessage::QuotationMessage_QuotationKbarMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationMessage_QuotationKbarMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  open_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  open_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  close_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  close_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  high_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  high_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  low_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  low_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vol_ = const_cast< ::RationalNumber*>(
      ::RationalNumber::internal_default_instance());
#else
  vol_ = const_cast< ::RationalNumber*>(&::RationalNumber::default_instance());
#endif
}

QuotationMessage_QuotationKbarMessage::QuotationMessage_QuotationKbarMessage(const QuotationMessage_QuotationKbarMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationMessage_QuotationKbarMessage::SharedCtor() {
  _cached_size_ = 0;
  yyyymmdd_ = 0u;
  hhmmdd_ = 153000u;
  open_ = NULL;
  close_ = NULL;
  high_ = NULL;
  low_ = NULL;
  vol_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationMessage_QuotationKbarMessage::~QuotationMessage_QuotationKbarMessage() {
  SharedDtor();
}

void QuotationMessage_QuotationKbarMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete open_;
    delete close_;
    delete high_;
    delete low_;
    delete vol_;
  }
}

void QuotationMessage_QuotationKbarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationMessage_QuotationKbarMessage& QuotationMessage_QuotationKbarMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationMessage_QuotationKbarMessage* QuotationMessage_QuotationKbarMessage::default_instance_ = NULL;

QuotationMessage_QuotationKbarMessage* QuotationMessage_QuotationKbarMessage::New() const {
  return new QuotationMessage_QuotationKbarMessage;
}

void QuotationMessage_QuotationKbarMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yyyymmdd_ = 0u;
    hhmmdd_ = 153000u;
    if (has_open()) {
      if (open_ != NULL) open_->::RationalNumber::Clear();
    }
    if (has_close()) {
      if (close_ != NULL) close_->::RationalNumber::Clear();
    }
    if (has_high()) {
      if (high_ != NULL) high_->::RationalNumber::Clear();
    }
    if (has_low()) {
      if (low_ != NULL) low_->::RationalNumber::Clear();
    }
    if (has_vol()) {
      if (vol_ != NULL) vol_->::RationalNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationMessage_QuotationKbarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 yyyymmdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yyyymmdd_)));
          set_has_yyyymmdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hhmmdd;
        break;
      }

      // optional uint32 hhmmdd = 2 [default = 153000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hhmmdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hhmmdd_)));
          set_has_hhmmdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_open;
        break;
      }

      // required .RationalNumber open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_close;
        break;
      }

      // required .RationalNumber close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_high;
        break;
      }

      // required .RationalNumber high = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_low;
        break;
      }

      // required .RationalNumber low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vol;
        break;
      }

      // required .RationalNumber vol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationMessage_QuotationKbarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 yyyymmdd = 1;
  if (has_yyyymmdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->yyyymmdd(), output);
  }

  // optional uint32 hhmmdd = 2 [default = 153000];
  if (has_hhmmdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hhmmdd(), output);
  }

  // required .RationalNumber open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->open(), output);
  }

  // required .RationalNumber close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->close(), output);
  }

  // required .RationalNumber high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->high(), output);
  }

  // required .RationalNumber low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->low(), output);
  }

  // required .RationalNumber vol = 7;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->vol(), output);
  }

}

int QuotationMessage_QuotationKbarMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 yyyymmdd = 1;
    if (has_yyyymmdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yyyymmdd());
    }

    // optional uint32 hhmmdd = 2 [default = 153000];
    if (has_hhmmdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hhmmdd());
    }

    // required .RationalNumber open = 3;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open());
    }

    // required .RationalNumber close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close());
    }

    // required .RationalNumber high = 5;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high());
    }

    // required .RationalNumber low = 6;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low());
    }

    // required .RationalNumber vol = 7;
    if (has_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vol());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationMessage_QuotationKbarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationMessage_QuotationKbarMessage*>(&from));
}

void QuotationMessage_QuotationKbarMessage::MergeFrom(const QuotationMessage_QuotationKbarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yyyymmdd()) {
      set_yyyymmdd(from.yyyymmdd());
    }
    if (from.has_hhmmdd()) {
      set_hhmmdd(from.hhmmdd());
    }
    if (from.has_open()) {
      mutable_open()->::RationalNumber::MergeFrom(from.open());
    }
    if (from.has_close()) {
      mutable_close()->::RationalNumber::MergeFrom(from.close());
    }
    if (from.has_high()) {
      mutable_high()->::RationalNumber::MergeFrom(from.high());
    }
    if (from.has_low()) {
      mutable_low()->::RationalNumber::MergeFrom(from.low());
    }
    if (from.has_vol()) {
      mutable_vol()->::RationalNumber::MergeFrom(from.vol());
    }
  }
}

void QuotationMessage_QuotationKbarMessage::CopyFrom(const QuotationMessage_QuotationKbarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationMessage_QuotationKbarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  if (has_open()) {
    if (!this->open().IsInitialized()) return false;
  }
  if (has_close()) {
    if (!this->close().IsInitialized()) return false;
  }
  if (has_high()) {
    if (!this->high().IsInitialized()) return false;
  }
  if (has_low()) {
    if (!this->low().IsInitialized()) return false;
  }
  if (has_vol()) {
    if (!this->vol().IsInitialized()) return false;
  }
  return true;
}

void QuotationMessage_QuotationKbarMessage::Swap(QuotationMessage_QuotationKbarMessage* other) {
  if (other != this) {
    std::swap(yyyymmdd_, other->yyyymmdd_);
    std::swap(hhmmdd_, other->hhmmdd_);
    std::swap(open_, other->open_);
    std::swap(close_, other->close_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(vol_, other->vol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationMessage_QuotationKbarMessage::GetTypeName() const {
  return "QuotationMessage.QuotationKbarMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QuotationMessage::kReqIdFieldNumber;
const int QuotationMessage::kIsLastFieldNumber;
const int QuotationMessage::kCodeFieldNumber;
const int QuotationMessage::kQuoteFillMsgsFieldNumber;
const int QuotationMessage::kKbarMsgsFieldNumber;
#endif  // !_MSC_VER

QuotationMessage::QuotationMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationMessage::InitAsDefaultInstance() {
}

QuotationMessage::QuotationMessage(const QuotationMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationMessage::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  is_last_ = false;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationMessage::~QuotationMessage() {
  SharedDtor();
}

void QuotationMessage::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QuotationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationMessage& QuotationMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationMessage* QuotationMessage::default_instance_ = NULL;

QuotationMessage* QuotationMessage::New() const {
  return new QuotationMessage;
}

void QuotationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    is_last_ = false;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  quote_fill_msgs_.Clear();
  kbar_msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 req_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_last;
        break;
      }

      // optional bool is_last = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
          set_has_is_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // required string code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quote_fill_msgs;
        break;
      }

      // repeated .QuotationMessage.QuotationFillMessage quote_fill_msgs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote_fill_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quote_fill_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quote_fill_msgs;
        if (input->ExpectTag(42)) goto parse_kbar_msgs;
        break;
      }

      // repeated .QuotationMessage.QuotationKbarMessage kbar_msgs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kbar_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kbar_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kbar_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 req_id = 1 [default = 0];
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // optional bool is_last = 2 [default = false];
  if (has_is_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_last(), output);
  }

  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code(), output);
  }

  // repeated .QuotationMessage.QuotationFillMessage quote_fill_msgs = 4;
  for (int i = 0; i < this->quote_fill_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->quote_fill_msgs(i), output);
  }

  // repeated .QuotationMessage.QuotationKbarMessage kbar_msgs = 5;
  for (int i = 0; i < this->kbar_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->kbar_msgs(i), output);
  }

}

int QuotationMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 req_id = 1 [default = 0];
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // optional bool is_last = 2 [default = false];
    if (has_is_last()) {
      total_size += 1 + 1;
    }

    // required string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  // repeated .QuotationMessage.QuotationFillMessage quote_fill_msgs = 4;
  total_size += 1 * this->quote_fill_msgs_size();
  for (int i = 0; i < this->quote_fill_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quote_fill_msgs(i));
  }

  // repeated .QuotationMessage.QuotationKbarMessage kbar_msgs = 5;
  total_size += 1 * this->kbar_msgs_size();
  for (int i = 0; i < this->kbar_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kbar_msgs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationMessage*>(&from));
}

void QuotationMessage::MergeFrom(const QuotationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  quote_fill_msgs_.MergeFrom(from.quote_fill_msgs_);
  kbar_msgs_.MergeFrom(from.kbar_msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_is_last()) {
      set_is_last(from.is_last());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void QuotationMessage::CopyFrom(const QuotationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < quote_fill_msgs_size(); i++) {
    if (!this->quote_fill_msgs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kbar_msgs_size(); i++) {
    if (!this->kbar_msgs(i).IsInitialized()) return false;
  }
  return true;
}

void QuotationMessage::Swap(QuotationMessage* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(is_last_, other->is_last_);
    std::swap(code_, other->code_);
    quote_fill_msgs_.Swap(&other->quote_fill_msgs_);
    kbar_msgs_.Swap(&other->kbar_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationMessage::GetTypeName() const {
  return "QuotationMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
