// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WINNERLib/quotation_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WINNERLib/quotation_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto() {
  delete QuotationRequest::default_instance_;
  delete QuotationMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5ftime_2eproto();
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5freturn_5fcode_2eproto();
  QuotationRequest::default_instance_ = new QuotationRequest();
  QuotationMessage::default_instance_ = new QuotationMessage();
  QuotationRequest::default_instance_->InitAsDefaultInstance();
  QuotationMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WINNERLib_2fquotation_5fmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_once_);
void protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_once_,
                 &protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WINNERLib_2fquotation_5fmsg_2eproto {
  StaticDescriptorInitializer_WINNERLib_2fquotation_5fmsg_2eproto() {
    protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
  }
} static_descriptor_initializer_WINNERLib_2fquotation_5fmsg_2eproto_;
#endif
bool QuotationReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QuotationRequest::kReqTypeFieldNumber;
const int QuotationRequest::kCodeFieldNumber;
const int QuotationRequest::kBegTimeFieldNumber;
const int QuotationRequest::kEndTimeFieldNumber;
#endif  // !_MSC_VER

QuotationRequest::QuotationRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  beg_time_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
#else
  beg_time_ = const_cast< ::Time*>(&::Time::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  end_time_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
#else
  end_time_ = const_cast< ::Time*>(&::Time::default_instance());
#endif
}

QuotationRequest::QuotationRequest(const QuotationRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationRequest::SharedCtor() {
  _cached_size_ = 0;
  req_type_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beg_time_ = NULL;
  end_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationRequest::~QuotationRequest() {
  SharedDtor();
}

void QuotationRequest::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete beg_time_;
    delete end_time_;
  }
}

void QuotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationRequest& QuotationRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationRequest* QuotationRequest::default_instance_ = NULL;

QuotationRequest* QuotationRequest::New() const {
  return new QuotationRequest;
}

void QuotationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_type_ = 0;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_beg_time()) {
      if (beg_time_ != NULL) beg_time_->::Time::Clear();
    }
    if (has_end_time()) {
      if (end_time_ != NULL) end_time_->::Time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuotationReqType req_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QuotationReqType_IsValid(value)) {
            set_req_type(static_cast< ::QuotationReqType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // required string code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beg_time;
        break;
      }

      // required .Time beg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beg_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beg_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // required .Time end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuotationReqType req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req_type(), output);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // required .Time beg_time = 3;
  if (has_beg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->beg_time(), output);
  }

  // required .Time end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->end_time(), output);
  }

}

int QuotationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuotationReqType req_type = 1;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
    }

    // required string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required .Time beg_time = 3;
    if (has_beg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beg_time());
    }

    // required .Time end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationRequest*>(&from));
}

void QuotationRequest::MergeFrom(const QuotationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_beg_time()) {
      mutable_beg_time()->::Time::MergeFrom(from.beg_time());
    }
    if (from.has_end_time()) {
      mutable_end_time()->::Time::MergeFrom(from.end_time());
    }
  }
}

void QuotationRequest::CopyFrom(const QuotationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QuotationRequest::Swap(QuotationRequest* other) {
  if (other != this) {
    std::swap(req_type_, other->req_type_);
    std::swap(code_, other->code_);
    std::swap(beg_time_, other->beg_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationRequest::GetTypeName() const {
  return "QuotationRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int QuotationMessage::kCodeFieldNumber;
#endif  // !_MSC_VER

QuotationMessage::QuotationMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuotationMessage::InitAsDefaultInstance() {
}

QuotationMessage::QuotationMessage(const QuotationMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuotationMessage::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotationMessage::~QuotationMessage() {
  SharedDtor();
}

void QuotationMessage::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QuotationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuotationMessage& QuotationMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fquotation_5fmsg_2eproto();
#endif
  return *default_instance_;
}

QuotationMessage* QuotationMessage::default_instance_ = NULL;

QuotationMessage* QuotationMessage::New() const {
  return new QuotationMessage;
}

void QuotationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuotationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuotationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

}

int QuotationMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuotationMessage*>(&from));
}

void QuotationMessage::MergeFrom(const QuotationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void QuotationMessage::CopyFrom(const QuotationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuotationMessage::Swap(QuotationMessage* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuotationMessage::GetTypeName() const {
  return "QuotationMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
