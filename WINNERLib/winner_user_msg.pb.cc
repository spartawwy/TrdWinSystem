// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WINNERLib/winner_user_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WINNERLib/winner_user_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_WINNERLib_2fwinner_5fuser_5fmsg_2eproto() {
  delete UserRequest::default_instance_;
  delete UserRequestAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5ftime_2eproto();
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5freturn_5fcode_2eproto();
  UserRequest::default_instance_ = new UserRequest();
  UserRequestAck::default_instance_ = new UserRequestAck();
  UserRequest::default_instance_->InitAsDefaultInstance();
  UserRequestAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WINNERLib_2fwinner_5fuser_5fmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_once_);
void protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_once_,
                 &protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WINNERLib_2fwinner_5fuser_5fmsg_2eproto {
  StaticDescriptorInitializer_WINNERLib_2fwinner_5fuser_5fmsg_2eproto() {
    protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
  }
} static_descriptor_initializer_WINNERLib_2fwinner_5fuser_5fmsg_2eproto_;
#endif
bool RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequest::kRequestIdFieldNumber;
const int UserRequest::kRequestTypeFieldNumber;
const int UserRequest::kUserIdFieldNumber;
const int UserRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

UserRequest::UserRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserRequest::InitAsDefaultInstance() {
}

UserRequest::UserRequest(const UserRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  request_type_ = 0;
  user_id_ = 0u;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequest::~UserRequest() {
  SharedDtor();
}

void UserRequest::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserRequest& UserRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
#endif
  return *default_instance_;
}

UserRequest* UserRequest::default_instance_ = NULL;

UserRequest* UserRequest::New() const {
  return new UserRequest;
}

void UserRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    request_type_ = 0;
    user_id_ = 0u;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_type;
        break;
      }

      // required .RequestType request_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RequestType_IsValid(value)) {
            set_request_type(static_cast< ::RequestType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required .RequestType request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }

  // required uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

}

int UserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required .RequestType request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // required uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserRequest*>(&from));
}

void UserRequest::MergeFrom(const UserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void UserRequest::CopyFrom(const UserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserRequest::Swap(UserRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(request_type_, other->request_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserRequest::GetTypeName() const {
  return "UserRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequestAck::kUserIdFieldNumber;
const int UserRequestAck::kReqAckFieldNumber;
const int UserRequestAck::kReqTypeFieldNumber;
#endif  // !_MSC_VER

UserRequestAck::UserRequestAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserRequestAck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  req_ack_ = const_cast< ::RequestAck*>(
      ::RequestAck::internal_default_instance());
#else
  req_ack_ = const_cast< ::RequestAck*>(&::RequestAck::default_instance());
#endif
}

UserRequestAck::UserRequestAck(const UserRequestAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserRequestAck::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  req_ack_ = NULL;
  req_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequestAck::~UserRequestAck() {
  SharedDtor();
}

void UserRequestAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete req_ack_;
  }
}

void UserRequestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserRequestAck& UserRequestAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WINNERLib_2fwinner_5fuser_5fmsg_2eproto();
#endif
  return *default_instance_;
}

UserRequestAck* UserRequestAck::default_instance_ = NULL;

UserRequestAck* UserRequestAck::New() const {
  return new UserRequestAck;
}

void UserRequestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_req_ack()) {
      if (req_ack_ != NULL) req_ack_->::RequestAck::Clear();
    }
    req_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserRequestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req_ack;
        break;
      }

      // optional .RequestAck req_ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_req_type;
        break;
      }

      // optional .RequestType req_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RequestType_IsValid(value)) {
            set_req_type(static_cast< ::RequestType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRequestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional .RequestAck req_ack = 2;
  if (has_req_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->req_ack(), output);
  }

  // optional .RequestType req_type = 3;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->req_type(), output);
  }

}

int UserRequestAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .RequestAck req_ack = 2;
    if (has_req_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req_ack());
    }

    // optional .RequestType req_type = 3;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequestAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserRequestAck*>(&from));
}

void UserRequestAck::MergeFrom(const UserRequestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_req_ack()) {
      mutable_req_ack()->::RequestAck::MergeFrom(from.req_ack());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
  }
}

void UserRequestAck::CopyFrom(const UserRequestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequestAck::IsInitialized() const {

  return true;
}

void UserRequestAck::Swap(UserRequestAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(req_ack_, other->req_ack_);
    std::swap(req_type_, other->req_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserRequestAck::GetTypeName() const {
  return "UserRequestAck";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
